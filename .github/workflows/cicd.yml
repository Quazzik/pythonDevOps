name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория в CI/CD
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Проверка кода (для отладки, можно заменить на более полные тесты)
      - name: Echo Test
        run: echo "Running basic tests!"

      # Шаг 3: Сборка Docker образа и запуск контейнеров
      - name: Build and start Docker containers
        run: docker-compose up -d --build

      # Шаг 4: Проверка доступности базы данных
      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL database to be ready..."
          until docker exec -t $(docker ps -q -f name=your_project_name_db) pg_isready -U user -h db; do
            echo "Database is not ready, waiting..."
            sleep 2
          done
          echo "Database is ready!"

      # Шаг 5: Проверка логов контейнера с базой данных
      - name: Check PostgreSQL logs
        run: |
          docker logs $(docker ps -q -f name=your_project_name_db) || exit 1

      # Шаг 6: Подождать, пока API будет готово
      - name: Wait for API to be ready
        run: |
          echo "Waiting for the API to be ready..."
          until curl --silent --fail http://127.0.0.1:6007; do
            echo "API is not ready, waiting..."
            sleep 2
          done
          echo "API is ready!"

      # Шаг 7: Проверка доступности API
      - name: Ping API
        run: |
          curl --fail http://127.0.0.1:6007 || exit 1

      # Шаг 8: Проверка логов контейнера с приложением
      - name: Check Python app logs
        run: |
          docker logs $(docker ps -q -f name=your_project_name_python-app) || exit 1

      # Шаг 9: Проверка состояния контейнеров
      - name: Check container status
        run: |
          docker ps -a
